import{_ as s,c as e,o as i,a4 as a}from"./chunks/framework.E4YCCYO0.js";const g=JSON.parse('{"title":"defineExpose","description":"","frontmatter":{},"headers":[],"relativePath":"vue3/sfc/defineExpose.md","filePath":"vue3/sfc/defineExpose.md"}'),t={name:"vue3/sfc/defineExpose.md"},n=a(`<h1 id="defineexpose" tabindex="-1">defineExpose <a class="header-anchor" href="#defineexpose" aria-label="Permalink to &quot;defineExpose&quot;">​</a></h1><p><strong>作用：用于在<code>&lt;script setup&gt;</code>显式地定义组件需要暴露给外部的属性和方法</strong></p><p>在 Vue 3 的 <code>&lt;script setup&gt;</code> 语法糖中，可以直接声明响应式状态和其他组合式函数，而不需要显式地通过 <code>export default</code> 来暴露它们。因为<code>&lt;script setup&gt;</code> 会自动处理这些导出，使得在模板中可以直接访问这些响应式状态和函数。</p><p>但是有时候需要显式地暴露一些内容给父组件或其他部分（比如其他的 <code>&lt;script&gt;</code> 标签），可以使用 defineExpose 函数。defineExpose 是一个特殊的函数，只在 <code>&lt;script setup&gt;</code> 上下文中有效，<strong>用于显式地定义组件需要暴露给外部的属性和方法</strong></p><p>可以通过 defineExpose 编译器宏来显式指定在 <code>&lt;script setup&gt;</code> 组件中要暴露出去的属性</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    import { ref } from &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    const a = 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    const b = ref(2)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    defineExpose({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        a,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        b</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>当父组件通过模板引用的方式获取到当前组件的实例，获取到的实例会像这样 <code>{ a: number, b: number }</code></p><h2 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h2><ul><li>script setup 如果返回一个渲染函数h时，如果需要在模板中使用就必须显式进行暴露</li><li>暴露属性方法给父组件时</li></ul>`,9),p=[n];function l(o,d,c,h,r,E){return i(),e("div",null,p)}const u=s(t,[["render",l]]);export{g as __pageData,u as default};
