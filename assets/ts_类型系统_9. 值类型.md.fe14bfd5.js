import{_ as s,o as a,c as n,U as o}from"./chunks/framework.adbdbaa5.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ts/类型系统/9. 值类型.md","filePath":"ts/类型系统/9. 值类型.md","lastUpdated":1711942069000}'),l={name:"ts/类型系统/9. 值类型.md"},p=o(`<p>ts规定，单个值也是一种类型，称为值类型。比如&#39;hello&#39;，则是一个字符串&#39;hello&#39;类型。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 正确</span></span>
<span class="line"><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 报错</span></span></code></pre></div><p>上面中，变量<code>x</code>的类型是字符串<code>hello</code>，导致它只能赋值为这个字符串，赋值为其他字符串就会报错。</p><h2 id="ts推断" tabindex="-1"> ts推断 <a class="header-anchor" href="#ts推断" aria-label="Permalink to &quot;&amp;#x20;ts推断&quot;">​</a></h2><h3 id="_1-const命令声明的变量不是对象时" tabindex="-1"> 1. <strong><code>const</code>命令声明的变量不是对象时</strong> <a class="header-anchor" href="#_1-const命令声明的变量不是对象时" aria-label="Permalink to &quot;&amp;#x20;1. **\`const\`命令声明的变量不是对象时**&quot;">​</a></h3><p>ts推断类型时，遇到<strong>const命令声明的变量不是对象时</strong>， <strong>如果代码里面没有注明类型，就会推断该变量是值类型</strong>。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">// x 的类型是 &quot;https&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">const x = &#39;https&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">// y 的类型是 string</span></span>
<span class="line"><span style="color:#A6ACCD;">const y:string = &#39;https&#39;;</span></span></code></pre></div><p>上面示例中，变量<code>x</code>是<code>const</code>命令声明的，TypeScript 就会推断它的类型是值<code>https</code>，而不是<code>string</code>类型。</p><p>这样推断是合理的，因为<code>const</code>命令声明的变量，一旦声明就不能改变，相当于常量。值类型就意味着不能赋为其他值。</p><h3 id="_2-const声明的变量是对象时" tabindex="-1"> 2. const声明的变量是对象时 <a class="header-anchor" href="#_2-const声明的变量是对象时" aria-label="Permalink to &quot;&amp;#x20;2. const声明的变量是对象时&quot;">​</a></h3><p>则不会推断为值类型，而是根据属性来推断的。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// x 的类型是 { foo: number }</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 推断属性foo的类型是number</span></span></code></pre></div><h3 id="_3-特殊点" tabindex="-1">3. 特殊点 <a class="header-anchor" href="#_3-特殊点" aria-label="Permalink to &quot;3. 特殊点&quot;">​</a></h3><p>当ts推断数值值类型时，会出现子类型和父类型。</p><p>比如下面这个代码，左侧会看作是数值5类型，而右侧<strong>4+1</strong>则会看作number类型，而数值5类型，是number的子类型，在ts中子类型可以赋值父类型，父类型不能赋值子类型，所以会报错。这里是两种类型。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 报错</span></span></code></pre></div><p><strong>子类型可以赋值给父类型，父类型不能赋值给子类型。</strong></p><p>假如说真想让父类型赋值为子类型，要用到**类型断言。**下面语句就是告诉编译器，4+1当做值类型来看待，而不是number类型。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 正确</span></span></code></pre></div>`,19),t=[p];function e(c,r,y,i,C,D){return a(),n("div",null,t)}const F=s(l,[["render",e]]);export{d as __pageData,F as default};
