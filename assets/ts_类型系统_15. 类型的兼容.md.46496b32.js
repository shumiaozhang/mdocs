import{_ as s,o as a,c as n,U as o}from"./chunks/framework.adbdbaa5.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ts/类型系统/15. 类型的兼容.md","filePath":"ts/类型系统/15. 类型的兼容.md","lastUpdated":1711942069000}'),p={name:"ts/类型系统/15. 类型的兼容.md"},e=o(`<p>ts的类型存在兼容关系，某些类型可以兼容其他类型。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>变量<code>a</code>和<code>b</code>的类型是不一样的，但是变量<code>a</code>赋值给变量<code>b</code>并不会报错。这时，我们就认为，<code>b</code>的类型兼容<code>a</code>的类型。</p><p><strong>在ts中，如果类型A的值可以赋值给类型B，那么类型A就称为类型B的子类型，其中子类型可以赋值给父类型，父类型不能赋值给A类型。</strong></p><p>之所以有这样的规则，是因为<strong>子类型继承了父类型的所有特征</strong>，所以可以用在父类型的场合。但是，子类型可以有自己扩展的特征，就可能有父类型没有该特征，所以<strong>父类型不能用在子类型</strong>。</p>`,5),t=[e];function l(c,r,_,d,y,C){return a(),n("div",null,t)}const i=s(p,[["render",l]]);export{F as __pageData,i as default};
