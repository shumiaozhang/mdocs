import{_ as s,o as a,c as n,U as p}from"./chunks/framework.adbdbaa5.js";const i=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ts/泛型/1. 泛型简介.md","filePath":"ts/泛型/1. 泛型简介.md"}'),l={name:"ts/泛型/1. 泛型简介.md"},o=p(`<p>它的出现主要是为了解决参数与返回值类型之间的关系，比如一个函数接受一个类型的参数，并返回该参数，如果类型特别多就会很难写，可能会用到any，因为any可以代表任意类型的值，可也就相当于关闭了ts校验，此时泛型出现了，通过先定义一个占位(类型参数)，等真正调用函数时，传入不同的类型，就代表函数的参数类型以及返回值类型。</p><p>泛型的特点就是带有类型参数。</p><p>如何定义？在函数名后使用尖括号<code>&lt;T&gt;</code>,尖括号里存放类型参数，可以为多个参数,等到调用时传入具体的类型即可，就代表该函数参数的类型是什么。这里的T是随便起的名字，只是一个占位，起什么名字都行，默认这个名字的首字母大写。</p><p>这里传入了number类型，正常情况下函数调用时就可以省略不写类型参数的值，ts会自动推断，当推断不出来时会报错，需要自己写入类型参数的值。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getFirst</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;">T</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">getFirst</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">([</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">getFirst</span><span style="color:#A6ACCD;">([</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span></code></pre></div>`,5),t=[o];function e(c,r,F,y,C,D){return a(),n("div",null,t)}const _=s(l,[["render",e]]);export{i as __pageData,_ as default};
