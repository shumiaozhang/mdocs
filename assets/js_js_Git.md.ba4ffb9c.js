import{_ as a,o as s,c as t,U as e}from"./chunks/framework.adbdbaa5.js";const o="/assets/git-add1.43181775.png",C=JSON.parse('{"title":"Git常见指令","description":"","frontmatter":{},"headers":[],"relativePath":"js/js/Git.md","filePath":"js/js/Git.md"}'),l={name:"js/js/Git.md"},i=e(`<h1 id="git常见指令" tabindex="-1">Git常见指令 <a class="header-anchor" href="#git常见指令" aria-label="Permalink to &quot;Git常见指令&quot;">​</a></h1><p>已修改（modified）、已暂存（staged）、已提交（committed）</p><p>工作目录下的文件有两种状态：已跟踪和未跟踪。未跟踪是指还未被纳入版本控制管理，已跟踪的文件指已经被纳入版本控制管理的文件。</p><h3 id="_1-全局设置昵称邮箱" tabindex="-1">1. 全局设置昵称邮箱 <a class="header-anchor" href="#_1-全局设置昵称邮箱" aria-label="Permalink to &quot;1. 全局设置昵称邮箱&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git config </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">global user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">海阔天空</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">git config </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">global user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">email </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">shumiao_zhg@163.com</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><h3 id="_2-git初始化" tabindex="-1">2. git初始化 <a class="header-anchor" href="#_2-git初始化" aria-label="Permalink to &quot;2. git初始化&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git init</span></span></code></pre></div><h3 id="_2-查看状态" tabindex="-1">2. 查看状态 <a class="header-anchor" href="#_2-查看状态" aria-label="Permalink to &quot;2. 查看状态&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git status</span></span></code></pre></div><h3 id="_3-git-add-工作区变为暂存区" tabindex="-1">3. git add 工作区变为暂存区 <a class="header-anchor" href="#_3-git-add-工作区变为暂存区" aria-label="Permalink to &quot;3. git add 工作区变为暂存区&quot;">​</a></h3><ul><li>git add + 某个文件名或某些</li></ul><p>只提交某个文件或几个文件</p><img src="`+o+'" alt="git add 单个文件"><ul><li>git add .</li></ul><p>工作时的<strong>所有变化提交</strong>到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件,但会根据.gitignore做过滤</p><ul><li>git add .*</li></ul><p>跟git add . 不同的是，不会根据.gitignore过滤</p><ul><li>git add -u</li></ul><p>提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)</p><ul><li>git add -a</li></ul><p><code>git add -u</code> 和<code>git add . </code>的总和</p><h3 id="_4-git-commit" tabindex="-1">4. git commit <a class="header-anchor" href="#_4-git-commit" aria-label="Permalink to &quot;4. git commit&quot;">​</a></h3><ul><li>提交暂存区的文件</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git commit </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">m </span><span style="color:#89DDFF;">&quot;&quot;</span></span></code></pre></div><ul><li>提交已跟踪过的文件</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git commit </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">am </span><span style="color:#89DDFF;">&quot;&quot;</span></span></code></pre></div><p>tips:</p><p>-am 会把已跟踪的文件进行提交，-m是指把已跟踪的文件并处于暂存区的进行提交。间接的说，-am指令包括了<code>git add .</code>和<code>gitcommit -m &quot;&quot;</code>两个指令。</p><p>例子：</p><p>假如此时新建了一个a.txt文件，并输入内容<code>a</code>, 此时进行<code>git add .</code>，之后又新增内容<code>1</code>，此时内容变为<code>a1</code>，若此时直接<code>git commit -m &quot;&quot;</code> ，此时会把a.txt文件提交，但其中内容为<code>a</code>，因为此时的内容<code>1</code>，由于没有进行git add .是没有加入到暂存区的，是不会进行提交操作的。反之如果使用<code>git commit -am</code>，则会把内容<code>1</code>也进行提交 ，因为a.txt文件是已跟踪文件，会把所有修改一并提交。</p><h3 id="_5-git-push" tabindex="-1">5. git push <a class="header-anchor" href="#_5-git-push" aria-label="Permalink to &quot;5. git push&quot;">​</a></h3><h3 id="_6-快速切换上一个分支" tabindex="-1">6. 快速切换上一个分支 <a class="header-anchor" href="#_6-快速切换上一个分支" aria-label="Permalink to &quot;6. 快速切换上一个分支&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git checkout </span><span style="color:#89DDFF;">-</span></span></code></pre></div><h3 id="_7-展示本地分支关联远程仓库的情况" tabindex="-1">7. 展示本地分支关联远程仓库的情况 <a class="header-anchor" href="#_7-展示本地分支关联远程仓库的情况" aria-label="Permalink to &quot;7. 展示本地分支关联远程仓库的情况&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">git branch </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">vv</span></span></code></pre></div>',35),n=[i];function c(p,d,r,g,u,h){return s(),t("div",null,n)}const D=a(l,[["render",c]]);export{C as __pageData,D as default};
