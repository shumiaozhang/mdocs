import{_ as a,o as e,c as l,U as t}from"./chunks/framework.adbdbaa5.js";const m=JSON.parse('{"title":"类型系统","description":"","frontmatter":{},"headers":[],"relativePath":"ts/类型系统/1. 类型介绍.md","filePath":"ts/类型系统/1. 类型介绍.md","lastUpdated":1711942069000}'),i={name:"ts/类型系统/1. 类型介绍.md"},r=t('<h1 id="类型系统" tabindex="-1">类型系统 <a class="header-anchor" href="#类型系统" aria-label="Permalink to &quot;类型系统&quot;">​</a></h1><h2 id="_1-类型是什么" tabindex="-1">1. 类型是什么？ <a class="header-anchor" href="#_1-类型是什么" aria-label="Permalink to &quot;1. 类型是什么？&quot;">​</a></h2><p>类型指的是一组具有相同特征的值，如果两个值具有某种共同的特征，就可以说，它们属于同一种类型。</p><p>一旦确定某个值的类型，就意味着这个值具有该类型的所有特征，可以进行该类型的所有运算。凡是适用于该类型的地方，都可以用这个值。凡是不是适用该类型的地方，适用这个值都会报错。</p><h2 id="_2-如何理解类型" tabindex="-1"> 2. 如何理解类型 <a class="header-anchor" href="#_2-如何理解类型" aria-label="Permalink to &quot;&amp;#x20;2. 如何理解类型&quot;">​</a></h2><p><strong>类型其实是人为添加的一种编程约束和用法提示。</strong></p><h2 id="_3-目的" tabindex="-1"> 3. 目的 <a class="header-anchor" href="#_3-目的" aria-label="Permalink to &quot;&amp;#x20;3. 目的&quot;">​</a></h2><p>在软件开发过程中，为编译器和开发工具提供更多的验证和帮助，从而提高代码质量，减少错误。</p><p>ts在开发阶段如果错误会报错，这样有利于提前发现错误，从而避免。另外如果函数中加入类型，具有提示作用，可以告诉开发者如果使用这个函数。</p><h2 id="_4-动态类型和静态类型" tabindex="-1">4. 动态类型和静态类型 <a class="header-anchor" href="#_4-动态类型和静态类型" aria-label="Permalink to &quot;4. 动态类型和静态类型&quot;">​</a></h2><p>JS本身就有自己的类型系统，比如数值、字符串，但是JS的类型系统非常弱，没有限制，运算符可以接受各种类型的值，在语法上，JS属于动态类型语言。</p><p>因为没有限制，比如先定义一个数值变量，然后再将其修改为字符串，这样也会成功，不容易发现代码错误。</p><p>而ts则引入了更强大，更严格的类型系统，属于静态类型语言。就是在定义变量的时候也随之定义其类型，这个类型定义完，就不能再进行修改了。</p><h2 id="_5-静态类型优点" tabindex="-1">5. 静态类型优点 <a class="header-anchor" href="#_5-静态类型优点" aria-label="Permalink to &quot;5. 静态类型优点&quot;">​</a></h2><ul><li>有利于代码的静态分析</li></ul><p>就是不必运行代码，就能确定变量的类型，从而推断出代码有没有错误，这就叫做代码的静态分析。</p><ul><li>有利于发现错误</li></ul><p>每个值、每个变量、运算符都有严格的类型约束，一旦写错，很容易能发现问题。</p><ul><li>IDE支持，语法提示和自动补全</li><li>提供了代码文档</li></ul><p>通过类型就可以代替部分代码文档，通过类型，就可以大致推断代码的作用</p><ul><li>有利于重构</li></ul><p>因为项目越大，代码之间的关联性越大，修改的时候就能越小心。</p><p>而有了类型信息后，比如函数，对象的参数，返回值类型保持不变，那就基本技术重构后也能正常运行，不会报错。</p><h2 id="_6-静态类型的缺点" tabindex="-1"> 6. 静态类型的缺点 <a class="header-anchor" href="#_6-静态类型的缺点" aria-label="Permalink to &quot;&amp;#x20;6. 静态类型的缺点&quot;">​</a></h2><ul><li>丧失了动态类型代码的灵活性</li><li>增加了编程工作量</li></ul><p>得编写定义的类型</p><ul><li>更高的学习成本</li></ul><p>类型系统通常比较复杂</p><ul><li>引入了独立的编译步骤</li></ul><p>原生JS代码可以直接在JS引擎运行，而添加类型系统后，就多出了一个独立的编译步骤，要检查类型是否正确，然后再将ts转为js才能运行代码。</p><ul><li>兼容性</li></ul><p>ts依赖js生态，需要用到很多外部模块，但是很多过去js项目没有适配ts。</p><p>总的来说这些缺点对于小型的，短期的个人项目并不友好。</p>',33),o=[r];function p(s,_,h,n,d,u){return e(),l("div",null,o)}const f=a(i,[["render",p]]);export{m as __pageData,f as default};
