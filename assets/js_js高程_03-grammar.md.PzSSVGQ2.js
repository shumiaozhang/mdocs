import{_ as s,c as a,o as i,a2 as n}from"./chunks/framework.DwDoyBw8.js";const E=JSON.parse('{"title":"语法","description":"","frontmatter":{},"headers":[],"relativePath":"js/js高程/03-grammar.md","filePath":"js/js高程/03-grammar.md","lastUpdated":1712760158000}'),e={name:"js/js高程/03-grammar.md"},t=n(`<h1 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h1><p>任何一门语言的核心都是用来描述这门语言的最基本的工作原理，描述这些内容主要涉及到语法，操作符，数据类型以及内置功能等一些基本概念。<code>ECMAScript</code>就是<code>JavaScript</code>的核心。</p><p><code>JavaScript</code>是一门解释型脚本、弱类型、动态性、跨平台语言。</p><ul><li>解释型脚本：不需要编译，直接可以运行</li><li>弱类型：对数据类型没有严格要求</li><li>动态性：是采用事件驱动的脚本语言，浏览器滑动就能做出反应</li><li>跨平台：不依赖操作系统，只要浏览器支持即可，有宿主环境即可</li></ul><h2 id="标识符" tabindex="-1">标识符 <a class="header-anchor" href="#标识符" aria-label="Permalink to &quot;标识符&quot;">​</a></h2><p>标识符就是指变量、函数、属性的名字，或者函数的参数。</p><p>命名规则：</p><ul><li>只能是字母、下划线(<code>_</code>)、<code>$</code>开头</li><li>其他字符可以是字母、下划线(<code>_</code>)、<code>$</code>或者数字</li></ul><h2 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-label="Permalink to &quot;注释&quot;">​</a></h2><p>分为单行注释和多行注释。</p><p>例如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 单行注释</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	多行注释</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span></code></pre></div><h2 id="严格模式" tabindex="-1">严格模式 <a class="header-anchor" href="#严格模式" aria-label="Permalink to &quot;严格模式&quot;">​</a></h2><p>声明<strong>严格模式</strong>就是在js代码最上面编写<code>&quot;use strict&quot;</code>，即可，这样执行时就按照严格模式执行代码。</p><h2 id="关键字和保留字" tabindex="-1">关键字和保留字 <a class="header-anchor" href="#关键字和保留字" aria-label="Permalink to &quot;关键字和保留字&quot;">​</a></h2><p>关键字就是程序用在控制语句的开始或结束，或者用于执行某个操作。比如<code>break</code>、<code>else</code>等，对于关键字不能用作标识符。</p><p>保留字就是保留一些字符，可能未来会变成关键字，暂时不允许使用，因此保留字也不能用作标识符。</p><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><p><code>JavaScript</code>是松散型类型的，松散型类型就是可以保存任何类型的数据，换句话说每个变量就是一个仅仅用于保存值的占位符而已。定义变量要使用<code>var</code>操作符（<code>var</code>是一个关键字），后面跟的变量名（就是一个标识符）</p><p>例如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message;</span></span></code></pre></div><p>**注意：**用<code>var</code>操作符定义的变量将成为该变量的作用域中的局部变量，也就是说假如在一个函数体内声明，这个变量在函数体外是访问不到的，因为退出函数体后会立即销毁。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 会报错</span></span></code></pre></div><p>但是假如在函数体内去掉<code>var</code>操作符，直接声明变量，会变成一个隐式全局变量，那样在函数体外也能访问到，但是不建议这样做，梳理代码时会麻烦。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span></code></pre></div><p><strong>{docsify-updated}</strong></p>`,27),l=[t];function p(h,k,d,o,r,c){return i(),a("div",null,l)}const u=s(e,[["render",p]]);export{E as __pageData,u as default};
