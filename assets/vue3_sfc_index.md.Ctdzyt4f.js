import{_ as e,c as t,o,a4 as c}from"./chunks/framework.E4YCCYO0.js";const S=JSON.parse('{"title":"单文件组件 (SFC)","description":"","frontmatter":{},"headers":[],"relativePath":"vue3/sfc/index.md","filePath":"vue3/sfc/index.md"}'),d={name:"vue3/sfc/index.md"},l=c('<h1 id="单文件组件-sfc" tabindex="-1">单文件组件 (SFC) <a class="header-anchor" href="#单文件组件-sfc" aria-label="Permalink to &quot;单文件组件 (SFC)&quot;">​</a></h1><p>Vue 3 的 SFC（Single File Components）是一种特殊的文件格式，它允许你将一个 Vue 组件的逻辑、模板和样式都写在一个 <code>.vue</code> 文件中。这种组织方式使得组件的开发更加集中和模块化，提高了代码的可读性和可维护性。</p><p>以下是 Vue 3 SFC 的工作原理：</p><ol><li><p><strong>文件结构</strong>：一个 <code>.vue</code> 文件通常由三部分组成：<code>&lt;template&gt;</code>、<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code>。<code>&lt;template&gt;</code> 部分包含组件的 HTML 结构，<code>&lt;script&gt;</code> 部分包含组件的逻辑（如数据、方法等），<code>&lt;style&gt;</code> 部分包含组件的样式。</p></li><li><p><strong>编译过程</strong>：当项目构建时，SFC 需要被编译成 JavaScript 代码，以便浏览器能够理解和执行。这个编译过程通常由 Vue 的构建工具（如 Vue CLI 或 Vite）和相关的加载器（如 <code>vue-loader</code>）来完成。</p><ul><li><strong>解析</strong>：加载器首先解析 <code>.vue</code> 文件，将其分解为 <code>&lt;template&gt;</code>、<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code> 三部分。</li><li><strong>转换</strong>：然后，加载器会对这三部分进行转换。<code>&lt;template&gt;</code> 部分会被转换为渲染函数或虚拟 DOM 节点，<code>&lt;script&gt;</code> 部分会被转换为 JavaScript 模块，<code>&lt;style&gt;</code> 部分则可能被转换为 CSS 字符串或其他格式。</li><li><strong>输出</strong>：最后，加载器将这些转换后的代码合并成一个 JavaScript 模块，并将其导出，供其他模块使用。</li></ul></li><li><p><strong>运行时</strong>：在浏览器运行时，Vue 运行时库会接管这些编译后的代码，并根据组件的定义创建和渲染组件实例。当组件的数据发生变化时，Vue 的响应式系统会检测到这些变化，并自动更新组件的 DOM，以保持视图和数据的同步。</p></li></ol><p>通过 SFC，你可以将组件的所有相关代码都放在同一个文件中，这有助于保持代码的清晰和一致。同时，由于 SFC 是基于 Vue 的编译和运行时系统的，因此你可以充分利用 Vue 提供的各种功能和优化，以构建高效、可维护的 Vue 应用程序。</p>',5),s=[l];function a(r,i,n,p,_,g){return o(),t("div",null,s)}const m=e(d,[["render",a]]);export{S as __pageData,m as default};
