import{_ as s,o as a,c as e,U as l}from"./chunks/framework.adbdbaa5.js";const h=JSON.parse('{"title":"什么是编译","description":"","frontmatter":{},"headers":[],"relativePath":"ts/编译总的.md","filePath":"ts/编译总的.md"}'),o={name:"ts/编译总的.md"},n=l(`<h1 id="什么是编译" tabindex="-1">什么是编译 <a class="header-anchor" href="#什么是编译" aria-label="Permalink to &quot;什么是编译&quot;">​</a></h1><p>JS的运行环境(浏览器和nodeJS)不认识TS代码，所以TS想运行，必须先转化为JS代码，这个转化就叫做编译。</p><p>TS官方提供了编译器，编译时会将类型声明和类型相关的代码全部删除，只留下能运行的JS代码，不会改变JS的运行结果。</p><p><strong>注意点:</strong></p><p>TS的类型检查是编译时的类型检查，而不是代码运行时的类型检查，一旦代码编译为JS，运行时就不再进行检查了。</p><h1 id="编译器" tabindex="-1">编译器 <a class="header-anchor" href="#编译器" aria-label="Permalink to &quot;编译器&quot;">​</a></h1><p>TS官方提供的编译器叫做tsc，它可以将ts代码编译成js代码，如果想编译ts代码，必须先安装tsc。</p><p>根据约定，ts脚本文件使用<code>.ts</code>后缀名,js脚本文件使用<code>.js</code>后缀名，tsc作用就是把<code>.ts</code>脚本转为<code>.js</code>脚本。</p><h2 id="_1-安装" tabindex="-1"> 1. 安装 <a class="header-anchor" href="#_1-安装" aria-label="Permalink to &quot;&amp;#x20;1. 安装&quot;">​</a></h2><p>是一个npm模块，可以全局安装，也可以在项目中安装为一个依赖模块。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">npm install </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">g typescript</span></span></code></pre></div><p>检测是否安装成功, <code>-v</code>或<code>--version</code>参数检测当前安装的tsc版本。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">tsc </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">v</span></span>
<span class="line"><span style="color:#A6ACCD;">Version </span><span style="color:#F78C6C;">5.1</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">6</span></span></code></pre></div><p><code>-h</code>或<code>--help</code>参数输出基本帮助信息，<code>--all</code>参数查看完整帮助信息。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">tsc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--all</span></span></code></pre></div><h2 id="_2-编译脚本" tabindex="-1"> 2. 编译脚本 <a class="header-anchor" href="#_2-编译脚本" aria-label="Permalink to &quot;&amp;#x20;2. 编译脚本&quot;">​</a></h2><p>tsc命名后面，加上ts脚本文件，就可以将其编译成js脚本。</p><p>会直接在当前目录下生成一个.js脚本文件，这个脚本就是完全编译后生成的js代码，</p><p>也可以一次编译多个ts脚本。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">tsc app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts</span></span>
<span class="line"><span style="color:#A6ACCD;">tsc file1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts file2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts file3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts</span></span></code></pre></div><p>tsc后还可以添加参数，调整编译行为。</p><ul><li>--outFile</li></ul><p>将多个ts脚本编译成一个js文件</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">tsc file1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts file2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">outFile app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span></code></pre></div><ul><li>--outDir</li></ul><p>编译的时候默认保存到当前目录，使用<code>--outDir</code>可以指定保存到其他目录。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">tsc app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">outDir dist</span></span></code></pre></div><ul><li>--target </li></ul><p>指定编译后JS的版本，建议使用es2015</p><p>因为为了保证编译的结果能在各种JS引擎运行，tsc默认会将ts代码编译成低版本的JS，默认是es3版本。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">tsc </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">target es2015 app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts</span></span></code></pre></div><h2 id="_3-编译错误的处理" tabindex="-1"> 3. 编译错误的处理 <a class="header-anchor" href="#_3-编译错误的处理" aria-label="Permalink to &quot;&amp;#x20;3. 编译错误的处理&quot;">​</a></h2><p>编译过程中，如果没有报错，tsc命令不会显示任何信息。如果编译报错，则会显示报错信息，但是默认依然会编译生成JS脚本。</p><p>假如想一旦报错就停止编译，不生产编译产物，可以使用<code>--noEmitOnError</code>参数。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">tsc </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">noEmitOnError app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts</span></span></code></pre></div><p><code>--noEmit</code> 只检查类型是否正确,不生成JS文件。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">tsc </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">noEmit app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts</span></span></code></pre></div><h2 id="_4-tsconfig-json" tabindex="-1">4. tsconfig.json <a class="header-anchor" href="#_4-tsconfig-json" aria-label="Permalink to &quot;4. tsconfig.json&quot;">​</a></h2><p>tsc的编译参数不仅可以写在命令行里，也能写在配置文件中。<a href="./tsconfig">tsconfig.json</a></p>`,39),p=[n];function t(c,r,i,d,C,D){return a(),e("div",null,p)}const A=s(o,[["render",t]]);export{h as __pageData,A as default};
