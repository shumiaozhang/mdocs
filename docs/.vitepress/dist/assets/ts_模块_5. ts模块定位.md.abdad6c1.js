import{_ as s,o,c as e,U as a}from"./chunks/framework.adbdbaa5.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ts/模块/5. ts模块定位.md","filePath":"ts/模块/5. ts模块定位.md"}'),l={name:"ts/模块/5. ts模块定位.md"},n=a(`<p>是一种算法，用来确定import语句和export语句里面的模块文件位置。</p><p>编译参数<code>moduleResolution</code>，用来指定具体使用哪一种定位算法。常用的算法有两种：<code>Classic</code>和<code>Node</code>。</p><p>如果没有指定<code>moduleResolution</code>，它的默认值与编译参数<code>module</code>有关。<code>module</code>设为<code>commonjs</code>时（项目脚本采用 CommonJS 模块格式），<code>moduleResolution</code>的默认值为<code>Node</code>，即采用 Node.js 的模块定位算法。其他情况下（<code>module</code>设为 es2015、 esnext、amd, system, umd 等等），就采用<code>Classic</code>定位算法。</p><h2 id="_1-相对模块、非相对模块" tabindex="-1"> 1. 相对模块、非相对模块 <a class="header-anchor" href="#_1-相对模块、非相对模块" aria-label="Permalink to &quot;&amp;#x20;1. 相对模块、非相对模块&quot;">​</a></h2><p>加载模块时，目标模块分为相对模块和非相对模块两种。</p><p>相对模块指定是路径以<code>/</code> 、<code>./</code> 开头的模块，是根据当前脚本的位置进行计算的，一般用于保存在当前项目目录结构中的模块脚本</p><p>非相对模块指的是不带路径信息的模块，是由baseUrl属性或者模块映射确定的，通常用于加载外部模块</p><h2 id="_2-classic方法" tabindex="-1"> 2. Classic方法 <a class="header-anchor" href="#_2-classic方法" aria-label="Permalink to &quot;&amp;#x20;2. Classic方法&quot;">​</a></h2><p>以当前脚本的路径作为<strong>基准路径</strong>来计算相对模块的位置，只在一个目录下查找。</p><p>至于非相对模块，也是以当前脚本的路径作为起点，一层层查找上级目录。</p><h2 id="_3-node方法" tabindex="-1"> 3.Node方法 <a class="header-anchor" href="#_3-node方法" aria-label="Permalink to &quot;&amp;#x20;3.Node方法&quot;">​</a></h2><p>就是模拟Node.js的模块加载方法，也就是require()的实现方法。</p><p>相对模块以当前脚本的路径作为<strong>基准路径</strong>，比如，脚本文件<code>a.ts</code>里面有一行代码<code>let x = require(&quot;./b&quot;);</code>，ts 按照以下顺序查找。</p><ol><li>当前目录是否包含<code>b.ts</code>、<code>b.tsx</code>、<code>b.d.ts</code>。如果不存在就执行下一步。</li><li>当前目录是否存在子目录<code>b</code>，该子目录里面的<code>package.json</code>文件是否有<code>types</code>字段指定了模块入口文件。如果不存在就执行下一步。</li><li>当前目录的子目录<code>b</code>是否包含<code>index.ts</code>、<code>index.tsx</code>、<code>index.d.ts</code>。如果不存在就报错。</li></ol><p>非相对模块则是以当前脚本的路径作为起点，逐级向上层目录查找是否存在子目录<code>node_modules</code>。比如，脚本文件<code>a.js</code>有一行<code>let x = require(&quot;b&quot;);</code>，TypeScript 按照以下顺序进行查找。</p><ol><li>当前目录的子目录<code>node_modules</code>是否包含<code>b.ts</code>、<code>b.tsx</code>、<code>b.d.ts</code>。</li><li>当前目录的子目录<code>node_modules</code>，是否存在文件<code>package.json</code>，该文件的<code>types</code>字段是否指定了入口文件，如果是的就加载该文件。</li><li>当前目录的子目录<code>node_modules</code>里面，是否包含子目录<code>@types</code>，在该目录中查找文件<code>b.d.ts</code>。</li><li>当前目录的子目录<code>node_modules</code>里面，是否包含子目录<code>b</code>，在该目录中查找<code>index.ts</code>、<code>index.tsx</code>、<code>index.d.ts</code>。</li><li>进入上一层目录，重复上面4步，直到找到为止。</li></ol><h2 id="_4-路径映射" tabindex="-1"> 4. 路径映射 <a class="header-anchor" href="#_4-路径映射" aria-label="Permalink to &quot;&amp;#x20;4. 路径映射&quot;">​</a></h2><p>可以在tsconfig.json文件里手动指定脚本模块的路径</p><p>（1）baseUrl</p><p><code>baseUrl</code>字段可以手动指定脚本模块的基准目录。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">baseUrl</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>上面示例中，<code>baseUrl</code>是一个点，表示基准目录就是<code>tsconfig.json</code>所在的目录。</p><p>（2）paths</p><p><code>paths</code>字段指定非相对路径的模块与实际脚本的映射。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">baseUrl</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">paths</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">jquery</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node_modules/jquery/dist/jquery</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>上面示例中，加载模块<code>jquery</code>时，实际加载的脚本是<code>node_modules/jquery/dist/jquery</code>，它的位置要根据<code>baseUrl</code>字段计算得到。</p><p>注意，上例的<code>jquery</code>属性的值是一个数组，可以指定多个路径。如果第一个脚本路径不存在，那么就加载第二个路径，以此类推。</p><p>（3）rootDirs</p><p><code>rootDirs</code>字段指定模块定位时必须查找的其他目录。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">rootDirs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">src/zh</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">src/de</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">src/#{locale}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>上面示例中，<code>rootDirs</code>指定了模块定位时，需要查找的不同的国际化目录。</p><h2 id="_5-编译选项traceresolution" tabindex="-1"> 5. 编译选项<code>traceResolution</code> <a class="header-anchor" href="#_5-编译选项traceresolution" aria-label="Permalink to &quot;&amp;#x20;5. 编译选项\`traceResolution\`&quot;">​</a></h2><p>由于模块定位的过程很复杂，tsc 命令有一个<code>--traceResolution</code>参数，能够在编译时在命令行显示模块定位的每一步。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ tsc --traceResolution</span></span></code></pre></div><p>上面示例中，<code>traceResolution</code>会输出模块定位的判断过程。</p><h2 id="_6-编译选项noresolve" tabindex="-1"> 6. 编译选项<code>noResolve</code> <a class="header-anchor" href="#_6-编译选项noresolve" aria-label="Permalink to &quot;&amp;#x20;6. 编译选项\`noResolve\`&quot;">​</a></h2><p>tsc 命令的<code>--noResolve</code>参数，表示模块定位时，只考虑在命令行传入的模块。</p><p>举例来说，<code>app.ts</code>包含如下两行代码。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> A </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">moduleA</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> B </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">moduleB</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>使用下面的命令进行编译。</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$ tsc app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts moduleA</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">noResolve</span></span></code></pre></div><p>上面命令使用<code>--noResolve</code>参数，因此可以定位到<code>moduleA.ts</code>，因为它从命令行传入了；无法定位到<code>moduleB</code>，因为它没有传入，因此会报错。</p>`,42),p=[n];function c(t,r,d,i,D,F){return o(),e("div",null,p)}const m=s(l,[["render",c]]);export{u as __pageData,m as default};
