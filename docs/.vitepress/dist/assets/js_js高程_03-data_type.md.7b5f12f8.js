import{_ as s,o as a,c as l,U as n}from"./chunks/framework.adbdbaa5.js";const A=JSON.parse('{"title":"数据类型","description":"","frontmatter":{},"headers":[],"relativePath":"js/js高程/03-data_type.md","filePath":"js/js高程/03-data_type.md"}'),o={name:"js/js高程/03-data_type.md"},e=n(`<h1 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h1><p>ECMAScript中有5中简单数据类型（也称为基本数据类型），分别是<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>，还有一种复杂数据类型<code>object</code>，<code>object</code>从定义上来看就是一组无序排列的键值对。</p><h2 id="typeof-操作符" tabindex="-1">typeof 操作符 <a class="header-anchor" href="#typeof-操作符" aria-label="Permalink to &quot;typeof 操作符&quot;">​</a></h2><p>ECMAScript是松散类型，需要一个手段来检测数据类型，这里提供<code>typeof</code>操作符。对于不同类型的数据返回的结果也是不一样的。</p><ul><li>如果一个值未定义则返回<code>undefined</code></li><li>如果是一个字符串则返回<code>string</code></li><li>如果是一个数字则返回<code>number</code></li><li>如果是一个布尔类型则返回<code>boolean</code></li><li>如果是一个对象或者<code>null</code>则返回<code>object</code></li></ul><p>例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">11</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// number</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">11</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// number</span></span></code></pre></div><p><code>typeof</code>是一个操作符，并非是一个函数，带不带括号都可以，建议带一个括号。</p><h2 id="undefined类型" tabindex="-1">Undefined类型 <a class="header-anchor" href="#undefined类型" aria-label="Permalink to &quot;Undefined类型&quot;">​</a></h2><p><code>Undefined</code>类型是只有一个值的类型，那就是<code>undefined</code>，对于一个用<code>var</code>声明变量但未初始化值将返回<code>undefined</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> message</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(message)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// undefined</span></span></code></pre></div><p>对于是一个显示声明值为<code>undefined</code>是相等的</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> message</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(message </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> age)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div><p>虽说是相等的，但是不建议这样声明，因为本身不初始化值也是<code>undefined</code>。</p><p>需要注意的是一个未声明的变量，将不会返回<code>undefined</code>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> message</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// var age;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(message)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// undefined</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(age)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 报错</span></span></code></pre></div><p>但是对于<strong>typeof</strong>来说，未声明的变量也返回<code>undefined</code>。</p><h2 id="null类型" tabindex="-1">Null类型 <a class="header-anchor" href="#null类型" aria-label="Permalink to &quot;Null类型&quot;">​</a></h2><p><code>Null</code>类型是第二个只有一个类型的值，那就是<code>null</code>。<code>null</code>从定义上是一个空对象指针，也就是<code>typeof</code>检测返回<code>object</code>的原因。</p><p>如果定义一个变量准备保存对象，则做好初始化成<code>null</code>而不是其他的值，这样检查<code>null</code>值就知道相应的变量是否已经保存了一个对象的引用。</p><p>实际上<code>undefined</code>值是派生自<code>null</code>值的，因此ECMA-262规定对它们的相等性测试要返回true。</p><p>在现实使用中，如果定义的变量将要存储对象，则最好初始化成<code>null</code>，而没有要求时则不用初始化默认是<code>undefined</code>，这样有利于检测数据类型。</p><h2 id="boolean类型" tabindex="-1">Boolean类型 <a class="header-anchor" href="#boolean类型" aria-label="Permalink to &quot;Boolean类型&quot;">​</a></h2><p>是最常用的一种数据类型，有两个值，包括<code>true</code>和<code>false</code>。</p><p>由其他数据类型转为<code>Boolean</code>类型规则</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">Boolean</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div><table><thead><tr><th>数据类型</th><th>转为true</th><th>转为false</th></tr></thead><tbody><tr><td>Boolean</td><td>true</td><td>false</td></tr><tr><td>String</td><td>非空字符串</td><td>空字符串</td></tr><tr><td>Number</td><td>非0数字</td><td>0</td></tr><tr><td>Object</td><td>任何对象</td><td>null</td></tr><tr><td>Undefined</td><td></td><td>undefined</td></tr></tbody></table><h2 id="number类型" tabindex="-1">Number类型 <a class="header-anchor" href="#number类型" aria-label="Permalink to &quot;Number类型&quot;">​</a></h2><p>Number类型是JavaScript中最令人关注的数据类型，包括整数和浮点数。为了支持各种数值类型，定义了不同的数值字面量格式。有十进制、八进制、十六进制。</p><p>正常情况下都是十进制，比如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 十进制 10</span></span></code></pre></div><p>八进制：则是以<code>0</code>开头，后面包括<code>0-7</code>,就是以<code>8</code>进1，如果开头<code>0</code>后面的字面值超出了范围(也就是不是0-7的值)，则会认定为成十进制。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">01</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 八进制的1</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">011</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 八进制的9</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">09</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 超出了规定的范围，默认成十进制，变成十进制9</span></span></code></pre></div><p>十六进制：则是以<code>0x</code>开头，后面字面值为<code>0-9</code>和<code>A-F</code>。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0xA</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 十六进制的10</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0x1A</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 十六进制的26</span></span></code></pre></div><h3 id="_1-浮点数值" tabindex="-1">1. 浮点数值 <a class="header-anchor" href="#_1-浮点数值" aria-label="Permalink to &quot;1. 浮点数值&quot;">​</a></h3><p>浮点数值就是数值中必须有一个点<code>.</code>，并且点后面必须有一位数字。虽然小数点前面可以不为整数，为0但不建议将0省略。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">.1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 正确，但不建议去掉0</span></span></code></pre></div><p>由于存储浮点数值占的内存要大于存整数的内存，所以对于小数点后为0的浮点数将直接变成整数。例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 会变成1</span></span></code></pre></div><p>对于极小数或极大数，可以使用科学计数法<code>e</code>表示</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100000000</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 可以写成1e8</span></span></code></pre></div><h3 id="_2-数值范围" tabindex="-1">2. 数值范围 <a class="header-anchor" href="#_2-数值范围" aria-label="Permalink to &quot;2. 数值范围&quot;">​</a></h3><p>由于内存的限制，不能保存世界上所有的数值，能够表示的最小值保存在<code>Number.MIN_VALUE</code>中，这个值是5e-324,最大值保存在<code>Number.MAX_VALUE</code>中，这个值是1.7976931348623157e+308。</p><p>如果超出范围则会转为<code>Infinity</code>正无穷，<code>-Infinity</code>负无穷。</p><p>可以使用<code>isFinite()</code>函数进行检测，返回布尔值。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Number</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MIN_VALUE </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> Number</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MAX_VALUE</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">isFInite</span><span style="color:#A6ACCD;">(res))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span></code></pre></div><h3 id="_3-nan" tabindex="-1">3. NaN <a class="header-anchor" href="#_3-nan" aria-label="Permalink to &quot;3. NaN&quot;">​</a></h3><p>NaN，即非数值是一个特殊的数值，这个数值用于表示一个本来要返回数值的操作数结果未返回数值的情况。就是说白了本来结果应该是一个数值，结果却变成了其他的（比如一个数字除以一个对象，就不会有任何结果）就会返回NaN。</p><p>特点：</p><ul><li>涉及到任何的操作，只要包含NaN都会返回NaN。</li><li>NaN与任何值都不相等，包括本身。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span></code></pre></div><p><code>isNaN()</code>函数，传入一个参数，用来检测参数<strong>是否不是数值</strong>，如果不是数值返回<code>true</code>,否则返回<code>false</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">isNaN</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true 于本身都不相同</span></span>
<span class="line"><span style="color:#82AAFF;">isNaN</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#82AAFF;">isNaN</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false  可以转为数字</span></span>
<span class="line"><span style="color:#82AAFF;">isNaN</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true 对象不能转为数字</span></span></code></pre></div><h3 id="数值转化" tabindex="-1">数值转化 <a class="header-anchor" href="#数值转化" aria-label="Permalink to &quot;数值转化&quot;">​</a></h3><p>可以使用<code>Number()</code>、<code>parseInt()</code>和<code>parseFloat()</code>进行转换</p><ul><li>Number()</li></ul><p>如果是布尔类型，true返回1，false返回0</p><p>如果是数字，返回原值</p><p>如果是null，返回0</p><p>如果是undefined，返回NaN</p><p>如果是字符串都是数字，则将其转为十进制返回。比如022，返回22，前面的0将会省略。空字符串则返回0。如果是浮点数，则转为对应的浮点数值。其他的字符串则返回NaN</p><p>如果是对象，则调用对象的valueof()方法，然后按照前面的规则进行转换返回值。如果转换的结果是NaN，则调用对象的toString()方法，然后再依照前面的规则转换返回的字符串值。</p><ul><li>parseInt()</li></ul><p>如果第一个字符不是数字或者负号，将直接返回NaN，也就是说对于空字符将转换为NaN，而Number()则转为0。</p><p>如果第一个字符是数字字符，将会继续解析，直到解析为非数字字符，例如122a1,则返回122。</p><p>接收两个参数，第一个参数是要转化的值，第二个参数是基数，几进制。</p><p>例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">parseInt</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0x2f</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 告诉parseInt是16进制的值</span></span></code></pre></div><ul><li>parseFloat()</li></ul><p>只转化十进制数值，也是从第一个字符开始转化，直到遇到非数字为止。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">parseFloat</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">123blue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 123</span></span>
<span class="line"><span style="color:#82AAFF;">parseFloat</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1.2.3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1.2</span></span>
<span class="line"><span style="color:#82AAFF;">parseFloat</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0x3</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 0</span></span></code></pre></div><h2 id="string类型" tabindex="-1">String类型 <a class="header-anchor" href="#string类型" aria-label="Permalink to &quot;String类型&quot;">​</a></h2><p>String类型用于表示由0或者多个16位的Unicode字符组成的字符序列，即字符串。可以由单引号或多引号表示。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> str1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1q</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="转义字符" tabindex="-1">转义字符 <a class="header-anchor" href="#转义字符" aria-label="Permalink to &quot;转义字符&quot;">​</a></h3><ul><li>\\n 换行</li><li>\\\\ 斜线</li><li>\\b 退格</li><li>\\r 回车</li><li>\\f 进纸</li><li>\\&#39; 单引号</li><li>\\&quot; 双引号</li></ul><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h3><p>声明之后字符串是不可变的，若要修改则要先销毁旧的再填充新值。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">java</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">script</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>首先先创建字符串<code>java</code>给<code>str</code>，之后再将字符串<code>java</code>和<code>script</code>赋值给<code>str</code>，最后销毁字符串<code>java</code></p><h3 id="转化为字符串" tabindex="-1">转化为字符串 <a class="header-anchor" href="#转化为字符串" aria-label="Permalink to &quot;转化为字符串&quot;">​</a></h3><p>可以使用<code>toString()</code>和<code>String()</code>方法</p><p>数字、布尔值、对象和字符串都有<code>toString()</code>方法，但是<code>null</code>和<code>undefined</code>没有这个方法。</p><p>如果使用<code>toString()</code>方法并且是数字转化，则可以传入一个参数，表示基数，转化后的基数。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">11</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &#39;11&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">10</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &#39;a&#39;</span></span></code></pre></div><p>如果在不知道转化的值是不是null或undefined情况下，可以使用String()方法。</p><p>如果值是null，则返回null</p><p>如果值是undefined，则返回undefined</p><p>如果有toString()则返回相应的结果</p><h2 id="object类型" tabindex="-1">Object类型 <a class="header-anchor" href="#object类型" aria-label="Permalink to &quot;Object类型&quot;">​</a></h2><p>对象其实就是一组数据和功能的集合。对象可以通过执行new 操作符后跟要创建的对象类型的名称来创建。而创建Object类型的实例并为其添加属性或方法，就能创建自定义对象</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> o </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>Object的每个实例都具有以下属性和方法</p><ul><li>constructor：保存着用于创建当前对象的函数。构造函数就是Object()</li><li>hasOwnProperty(propertyName)：用于检查给定的属性在当前对象实例中是否存在</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">o</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 检查属性b是否存在对象o中</span></span></code></pre></div><ul><li>isPrototypeof(object)：用于检查传入的对象是否是当前对象的原型</li><li>propertyIsEnumerable(propertyName)：用于检查给定的属性是否能够使用for-in语句</li><li>toLocaleString()：返回对象的字符串表示</li><li>toString()：返回字符串表示</li><li>valueOf()：返回对象的字符串、数值或布尔值表示，通常与toString()方法返回值相同。</li></ul><p><strong>{docsify-updated}</strong></p>`,98),p=[e];function t(c,r,i,y,d,C){return a(),l("div",null,p)}const F=s(o,[["render",t]]);export{A as __pageData,F as default};
